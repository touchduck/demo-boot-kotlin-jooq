/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infra.hawaii.tables;


import com.example.demo.infra.hawaii.Indexes;
import com.example.demo.infra.hawaii.Keys;
import com.example.demo.infra.hawaii.Public;
import com.example.demo.infra.hawaii.tables.records.MemoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Memo extends TableImpl<MemoRecord> {

    private static final long serialVersionUID = 1751773868;

    /**
     * The reference instance of <code>public.memo</code>
     */
    public static final Memo MEMO = new Memo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemoRecord> getRecordType() {
        return MemoRecord.class;
    }

    /**
     * The column <code>public.memo.id</code>.
     */
    public final TableField<MemoRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.memo.user_id</code>.
     */
    public final TableField<MemoRecord, UUID> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.memo.title</code>.
     */
    public final TableField<MemoRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>public.memo.body</code>.
     */
    public final TableField<MemoRecord, String> BODY = createField(DSL.name("body"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.memo.created_at</code>.
     */
    public final TableField<MemoRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.memo.updated_at</code>.
     */
    public final TableField<MemoRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.memo.deleted_at</code>.
     */
    public final TableField<MemoRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>public.memo</code> table reference
     */
    public Memo() {
        this(DSL.name("memo"), null);
    }

    /**
     * Create an aliased <code>public.memo</code> table reference
     */
    public Memo(String alias) {
        this(DSL.name(alias), MEMO);
    }

    /**
     * Create an aliased <code>public.memo</code> table reference
     */
    public Memo(Name alias) {
        this(alias, MEMO);
    }

    private Memo(Name alias, Table<MemoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Memo(Name alias, Table<MemoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Memo(Table<O> child, ForeignKey<O, MemoRecord> key) {
        super(child, key, MEMO);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEMOS_PKEY);
    }

    @Override
    public UniqueKey<MemoRecord> getPrimaryKey() {
        return Keys.MEMOS_PKEY;
    }

    @Override
    public List<UniqueKey<MemoRecord>> getKeys() {
        return Arrays.<UniqueKey<MemoRecord>>asList(Keys.MEMOS_PKEY);
    }

    @Override
    public List<ForeignKey<MemoRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MemoRecord, ?>>asList(Keys.MEMO__FK_MEMOS_USER_ID_ID);
    }

    public User user() {
        return new User(this, Keys.MEMO__FK_MEMOS_USER_ID_ID);
    }

    @Override
    public Memo as(String alias) {
        return new Memo(DSL.name(alias), this);
    }

    @Override
    public Memo as(Name alias) {
        return new Memo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Memo rename(String name) {
        return new Memo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Memo rename(Name name) {
        return new Memo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, String, String, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
